#!/bin/zsh

# General
bindkey -v

# My binaries
path=("$HOME/bin" $path)

# History Settings
export HISTFILE=${ZDOTDIR:-$HOME}/.zsh_history
export SAVEHIST=5000
export HISTSIZE=2000
setopt share_history
setopt append_history
setopt hist_ignore_dups
setopt hist_reduce_blanks

# LS
alias ll='ls -alhFG'

# Files
alias dud="du -h -d1 | sort -h | tail -r"

# FASD
eval "$(fasd --init auto)"

# Autocomplete
# zstyle ':autocomplete:*' default-context 'history-incremental-search-backward'
# zstyle ':autocomplete:history-search:*' list-lines 5  # int
# zstyle ':autocomplete:*' list-lines 5  # int
source ~/dotfiles/zsh/zsh-autocomplete/zsh-autocomplete.plugin.zsh

# FZF
zvm_after_init_commands+=('[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh')

# Vim
alias vim=nvim
alias ep="vim ~/dotfiles/ohmyzsh"
alias rp="source ~/dotfiles/ohmyzsh"

# Docker
alias dkc="docker-compose"
alias dkr="docker-compose run"
function dke() {
  if [[ $1 = psql ]]; then
    echo "Running docker-compose exec db psql"
    docker-compose exec db psql -U postgres
  elif [[ $# -eq 1 ]]; then
    echo "Running docker-compose exec $1 bash"
    docker-compose exec "$1" bash
  elif [[ $# -eq 0 ]]; then
    local service="$(docker-compose ps --services | fzf)"
    docker-compose exec "$service" bash
  else
    echo "Running docker-compose exec $@"
    docker-compose exec "$@"
  fi
}

# Kubernetes
source <(kubectl completion zsh)
alias k=kubectl
complete -F __start_kubectl k

function db() {
  kubectl port-forward svc/postgres-12-postgresql "4000:5432"
}
function kubesec {
  kubectl get secrets "$1" -o json | jq -r ".data.$2" | base64 --decode
}

# Git
alias gitst="git st"

# GNU sed - brew install gnu-sed
path=("/usr/local/opt/gnu-sed/libexec/gnubin" $path)

# GNU find - brew install findutils
path=("/usr/local/opt/findutils/libexec/gnubin" $path)

# Rails
alias rs=bin/rails
alias rk=bin/rake

# File house-keeping
cleanup() {
  local files="$(find . -name '*.orig')"
  if [[ -z $files ]]; then
    echo "Already neat and tidy"
  else
    find . -name '*.orig' -printf '%p\n' -delete
    echo "The above files were removed successfully"
  fi
}

# iTerm2 Shell Integration
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh" || true

# GIT FZF
is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}
fzf-down() {
  fzf --height 50% --min-height 20 --border --bind ctrl-/:toggle-preview "$@"
}
gitf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1})' |
  cut -c4- | sed 's/.* -> //'
}
gitb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1)' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##' |
  xargs git checkout
}

gitt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {}'
}

gith() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always' |
  grep -o "[a-f0-9]\{7,\}"
}

gitr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1}' |
  cut -d$'\t' -f1
}

gits() {
  is_in_git_repo || return
  git stash list | fzf-down --reverse -d: --preview 'git show --color=always {1}' |
  cut -d: -f1
}
