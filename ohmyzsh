#!/bin/zsh

# General
bindkey -v

# My binaries
path=("$HOME/bin" $path)

# Gems
export GEM_HOME=/Users/nick/.gem

# History Settings
export HISTFILE=${ZDOTDIR:-$HOME}/.zsh_history
export SAVEHIST=10000
export HISTSIZE=2000
setopt share_history
setopt append_history
setopt hist_ignore_dups
setopt hist_reduce_blanks

# LS
alias ll='ls -alhFG'

# Files
alias dud="du -h -d1 | sort -h | tail -r"

# Z
if [ -f /usr/local/etc/profile.d/z.sh ]; then
  source /usr/local/etc/profile.d/z.sh
fi
if [ -f /opt/homebrew/etc/profile.d/z.sh ]; then
  source /opt/homebrew/etc/profile.d/z.sh
fi

# FZF
zvm_after_init_commands+=('[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh')

# Vim
alias vim=nvim
alias ep="vim ~/dotfiles/ohmyzsh"
alias rp="source ~/dotfiles/ohmyzsh"

# Python
alias python=/usr/bin/python3

# Docker
alias dkc="docker compose"
alias dku="docker compose up"
function dk() {
  local subcommand=exec
  if [[ $1 = run ]]; then
    subcommand="run --rm"
  fi
  if [[ $# -eq 1 ]]; then
    local service="$(docker compose ps --services | fzf)"
    echo "Running: docker compose $subcommand $service bash"
    eval "docker compose $subcommand $service bash"
  elif [[ $# -eq 2 ]]; then
    echo "Running: docker compose $subcommand $2 bash"
    eval "docker compose $subcommand $2 bash"
  else
    shift
    echo "Running: docker compose $subcommand $@"
    eval "docker compose $subcommand $@"
  fi
}
function dkr() {
  dk run "$@"
}
function dke() {
  dk exec "$@"
}

# Kubernetes
source <(kubectl completion zsh)
alias k=kubectl
complete -F __start_kubectl k

function db() {
  kubectl port-forward svc/postgres-postgresql "4000:5432"
}
function kubesec {
  kubectl get secrets "$1" -o json | jq -r ".data.$2" | base64 --decode
}

# Kubectl for google - needed until v1.26 is released
export USE_GKE_GCLOUD_AUTH_PLUGIN=True

# Git
alias gitst="git st"

# GNU sed - brew install gnu-sed
path=("/opt/homebrew/opt/gnu-sed/libexec/gnubin" $path)

# GNU find - brew install findutils
path=("/opt/homebrew/opt/findutils/libexec/gnubin" $path)

# Rails
alias rs=bin/rails
alias rk=bin/rake

# File house-keeping
cleanup() {
  local files="$(find . -name '*.orig')"
  if [[ -z $files ]]; then
    echo "Already neat and tidy"
  else
    find . -name '*.orig' -printf '%p\n' -delete
    echo "The above files were removed successfully"
  fi
}

# iTerm2 Shell Integration
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh" || true

# GIT FZF
source ~/.oh-my-zsh/custom/git.zsh

# Zsh autosuggestion
bindkey '^ ' autosuggest-accept

# z
function ze() {
  z -l "$1" | head -n1 | tr -s ' ' | cut -d' ' -f2
}

# Zsh partial line
PROMPT_EOL_MARK=''

# Zsh disable highlighting (doesn't work well sometimes in docker)
zle_highlight+=(paste:none)
unset zle_bracketed_paste

# Rails searching
function rgr() {
  rg -i -t ruby -g '!vendor' -g '!spec' -g '!test' $@
}

function deploy() {
  if [ $# = 0 ]; then
    echo "Deploy name required."
    return
  fi
  local remote_sha=$(k get deploy "$1" -o jsonpath="{.spec.template.spec.containers[0].image}" | cut -d: -f2)
  local local_sha=$(git rev-parse HEAD)
  if [ remote_sha = local_sha ]; then
    echo 'No difference in local and remote commit shas.'
  elif ! git diff-index --quiet HEAD --; then
    echo 'You have uncommitted changes'
  else
    make deploy
  fi
}

# Device-specific stuff
if [ -f ~/.zsh-custom ]; then
  source ~/.zsh-custom
fi
